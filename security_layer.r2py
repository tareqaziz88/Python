"""
This security layer interposes on a textfile 
and gives it open, close, read and write access.
However, a user should prevent any   

1) Uppercase letters from being  replaced by lowercase letters 
2) Reads that mix upper and lower case
If a user tries to the security layer will raise an exception.
Note:
  This security layer uses encasementlib.r2py, restrictions.default, repy.py and python
  Also you need to give it an application to run.
  This security layer never runs explicitly but instead interposes functions
  from above layers. 

	"""	

# This is just an example global variable.   It stores a list of the calls the application makes.[[BR]]
BUFFER = []
class SecureFile():
  def __init__(self,privilegedfo):
    self.privilegedfo = privilegedfo

  def readat(self,bytes,offset):
    BUFFER.append("readat")

    #Start: Raise ValueError if- Reads that mix upper and lower case
    lower = False
    upper = False
    retval = self.privilegedfo.readat(bytes,offset)
    for c in retval:
        if(c.isupper()):
	  upper = True
	elif(c.islower()):
          lower = True
        if(lower and upper):
          raise ValueError
    #End: Raise ValueError if- Reads that mix upper and lower case
    
    return self.privilegedfo.readat(bytes,offset)

  def writeat(self,data,offset):
    BUFFER.append("writeat")
    
    #Start: Raise ValueError if- Uppercase letters from being  replaced by lowercase letters
    existingval = self.privilegedfo.readat(len(data),offset)
    i = 0
    for c in existingval:
        if(c.isupper() and data[i].islower()):
          raise ValueError
        i = i + 1
    #End: Raise ValueError if- Uppercase letters from being  replaced by lowercase letters
    retval = self.privilegedfo.writeat(data,offset)
    return retval

  def close(self):
    BUFFER.append("close")
    return self.privilegedfo.close()


def secure_openfile(filename, create):
  BUFFER.append("openfile")
  # Open a file from the layer below (likely the sandbox)
  privilegedfo = openfile(filename,create)
  return SecureFile(privilegedfo)


# You can ignore the code below here.   It just sets of the security layer so that the application calls it instead of
# the original API functions.
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

sec_file_def = {"obj-type":SecureFile,
    "name":"SecureFile",
    "readat":{TYPE:FUNC,ARGS:((int,long,type(None)),(int,long)),EXCP:Exception,RETURN:str,TARGET:SecureFile.readat},
    "writeat":{TYPE:FUNC,ARGS:(str,(int,long)),EXCP:Exception,RETURN:(None),TARGET:SecureFile.writeat},
    "close":{TYPE:FUNC,ARGS:None,EXCP:None,RETURN:(bool,type(None)),TARGET:SecureFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:secure_openfile}

secure_dispatch_module()
